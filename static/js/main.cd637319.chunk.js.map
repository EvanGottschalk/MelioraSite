{"version":3,"sources":["scripts/SmartContractContext.js","image/logo.png","image/icons/twitter.png","image/icons/instagram.png","image/icons/linkedin.png","image/icons/discord.png","components/navbar/Navbar.js","image/background2.png","components/background/Background.js","image/banner-home.png","scripts/SmartContractOperator.js","image/meliora_comic_cover.png","image/meliora_comic_description.png","components/animation/Animation.js","image/mint_comic_button.png","image/play_read_button.png","image/sign_up_button.png","image/universe-image.png","image/guardians-image.png","image/partners-image.png","image/animations/exp/EXP_plus_5.gif","image/animations/exp/EXP_plus_10.gif","image/animations/TAP_plus_3.gif","image/click_to_open_button.png","components/gamegui/GameGUI.js","components/mintgui/MintGUI.js","pages/comicmint/ComicMint.js","App.js","index.js"],"names":["SmartContractContext","React","createContext","test","navigator","userAgent","console","log","Navbar","_useContext","useContext","_useContext2","user_address","setAddress_Context","_useContext3","user_token_ID","setTokenID_Context","_useContext4","user_balance","setBalance_Context","_useContext5","user_metadata","setMetadata_Context","user_avatar_URI","setAvatarURI_Context","mouseover","event","document","getElementById","target","id","style","transform","mouseleave","useEffect","Aos","init","duration","_jsx","className","children","_jsxs","href","window","location","src","logo","alt","onMouseOver","onMouseLeave","instagram_icon","discord_icon","twitter_icon","Background","addEventListener","parallax","querySelector","scrollPosition","scrollY","background2","display","ethers","require","run_on_load","default_contract_name","contract_dict","network_dict","default_network","network_name","network_ID","contract_name","provider","signer","user_web_wallet","opensea_link_delay","opensea_prefixes","pause","time","Promise","resolve","setTimeout","_onLoad","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","connectWallet","parseABI","sent","stop","apply","arguments","setProvider","_setProvider","_callee2","_context2","providers","Web3Provider","ethereum","abrupt","setSigner","_x","_setSigner","_callee3","provider_input","_context3","send","getSigner","setUserAddress","_x2","_setUserAddress","_callee4","signer_input","_context4","getAddress","setUserBalance","_x3","_setUserBalance","_callee5","_context5","getBalance","utils","formatEther","setUserTokenID","_x4","_x5","_setUserTokenID","_callee6","contract_name_input","address_input","contract","_context6","Contract","getPrimaryTokenID","getOpenSeaLink","_x10","_x11","_getOpenSeaLink","_callee10","token_ID_input","contract_address","opensea_link","_context10","promptNetworkSwitch","_x14","_promptNetworkSwitch","_callee14","network_name_input","network_switched","_context14","request","method","params","chainId","reload","_x16","_connectWallet","_callee16","_context16","_x17","_parseABI","_callee17","ABI","functions","_iterator","_step","entry","inputs","_context17","_createForOfIteratorHelper","s","n","done","value","type","map","input","name","err","e","f","getFunctionParams","_x19","_x20","_getFunctionParams","_callee19","function_name_input","function_params","_context19","runContractFunction","_x21","_x22","_runContractFunction","_callee20","function_name","button_text_object","iface","function_input_list","transaction_info","mint_price_raw","mint_price_fixed","transaction_hash","transaction_receipt","loop_count","wait_count","_args20","_context20","length","undefined","_address","Interface","format","FormatTypes","full","Array","isArray","getMyMintPrice","_toConsumableArray","concat","parseUnits","toString","mint","__mintFree","contractURI","__setContractURI","getMintPrice","__setMintPrice","getMaxSupply","__setMaxSupply","tokenURI","__setTokenURI","setPrimaryTokenID","getPrimaryTokenURI","getPrimaryHolderByIndex","getPrimaryHolderCount","getAllPrimaryHolders","__createTask","getTaskHash","getTask","getCharacter","completeTask","completeTaskBatch","setApprovalForAll","hash","getTransactionReceipt","textContent","insertAdjacentText","logs","topics","parseInt","onLoad","Animation","_Fragment","screen","width","height","MintGUI","setNetwork_Context","_useContext6","_useContext7","setContractName_Context","total_minted","mouseClick","_mouseClick","mint_button","setUserWalletInfo","executeMint","Number","open","updateTotalMinted","_executeMint","amount","token_ID","_setUserWalletInfo","user_wallet_info","_updateTotalMinted","total_minted_display","meliora_comic_cover_image","meliora_comic_description_image","onClick","placeholder","ComicMint","App","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","Provider","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cd637319.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SmartContractContext = React.createContext(null);\r\n\r\nexport default SmartContractContext;","export default __webpack_public_path__ + \"static/media/logo.bdf03968.png\";","export default __webpack_public_path__ + \"static/media/twitter.c561cadd.png\";","export default __webpack_public_path__ + \"static/media/instagram.9ffb2f16.png\";","export default __webpack_public_path__ + \"static/media/linkedin.76350122.png\";","export default __webpack_public_path__ + \"static/media/discord.667df059.png\";","//--------------------------------------------------------------------------------------------------\r\n//# Imports\r\n\r\nimport React, { useEffect, useContext } from 'react';\r\nimport SmartContractContext from '../../scripts/SmartContractContext';\r\nimport Aos from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\n\r\n//import walletButton from '../../image/button_4x1.png'\r\n//import connectWallet from '../../scripts/SmartContractOperator';\r\n\r\nimport logo from '../../image/logo.png'\r\n\r\nimport twitter_icon from '../../image/icons/twitter.png'\r\nimport linkedin_icon from '../../image/icons/linkedin.png'\r\nimport instagram_icon from '../../image/icons/instagram.png'\r\nimport discord_icon from '../../image/icons/discord.png'\r\n\r\nimport './navbar.css'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------\r\n//# Variables\r\n\r\nconst connect_on_load = false;\r\n\r\nvar mobile = false;\r\nif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n  console.log(\"Mobile device detected\");\r\n  mobile = true;\r\n};\r\n\r\n\r\n\r\n//AppStart\r\nconst Navbar = () => {\r\n\r\nlet { user_address, setAddress_Context } = useContext(SmartContractContext);\r\nlet { user_token_ID, setTokenID_Context } = useContext(SmartContractContext);\r\nlet { user_balance, setBalance_Context } = useContext(SmartContractContext);\r\nlet { user_metadata, setMetadata_Context } = useContext(SmartContractContext);\r\nlet { user_avatar_URI, setAvatarURI_Context } = useContext(SmartContractContext);\r\n\r\nuseEffect(() => {\r\n  Aos.init({ duration: 2000 });\r\n}, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------\r\n//# Functions\r\n\r\nfunction mouseover(event) {\r\n  let element = document.getElementById(event.target.id);\r\n  element.style.transform = 'scale(1.20)';\r\n};\r\n\r\nfunction mouseleave(event) {\r\n  let element = document.getElementById(event.target.id);\r\n  element.style.transform = 'scale(1.0)';\r\n};\r\n\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------\r\n//# HTML\r\n\r\nreturn (\r\n  <div className='navbar'>\r\n    {/* <div className='navbarMobile'>\r\n      <div className='navbarCenterIcon'>\r\n        <div className='navbarMobileTopRight '>MobileLeftTitle</div>\r\n      </div>\r\n    </div>\r\n    <div className='navbarMobileButton'>\r\n      <MobileMenu className={Mobile ? 'Mobile' : 'Mobile'} onClick={HandleMobileMenu} />\r\n      <div className={Mobile ? 'navbarMobileContainerActive' : 'navbarMobileContainer'}>\r\n        <div className={Mobile ? 'navbarMenu active' : 'navbarMenu'}>\r\n          <div className='navbarMenuContainer'>\r\n            <div className='navbarMobileTop'>\r\n              <div className='navbarMobileTopRight menuOpen'>MobileMenuText</div>\r\n              <div className='navbarMobileTopLeft'>\r\n                <Close className='CloseIcon' onClick={HandleMobileMenu} />\r\n              </div>\r\n            </div>\r\n            <div className='navbarMobileMain'>\r\n              <div className='navbarCenterLink opacity7'>MobileMenuMiddleText</div>\r\n              <div className='navbarCenterLink navbarRightButton'>MobileMenuButton</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>*/}\r\n    <div className='navbarContainer SlideRightAnimation'>\r\n      <div className='navbarLeft'>\r\n        <div id=\"navbarLogo\" className='navbarLogo'>\r\n          <a href={window.location['origin']}>\r\n            <img data-aos=\"fade-down-right\" className=\"navbarLogoImage\" id=\"navbarLogoImage\" src={logo} alt='Home' onMouseOver={mouseover} onMouseLeave={mouseleave}/>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <div className='navbarRight'>\r\n        <div className='navbarSocialsContainer'>\r\n          <div className='navbarIconContainer'>\r\n            <a href='https://www.instagram.com/melioraapp/' target=\"_blank\">\r\n              <img data-aos=\"fade-down-left\" src={instagram_icon} onMouseOver={mouseover} onMouseLeave={mouseleave} id='instagramIcon' className='navbarIcon instagramIcon' alt='@MelioraFun'/>\r\n            </a>\r\n            {/* <a href='https://www.linkedin.com/in/evan-gottschalk/' target=\"_blank\">\r\n              <img data-aos=\"fade-down\" src={linkedin_icon} onMouseOver={mouseover} onMouseLeave={mouseleave} id='linkedinIcon' className='navbarIcon linkedinIcon' alt='NoFun Labs'/>\r\n            </a> */}\r\n            <a href='https://nofunz.one/discord/' target=\"_blank\">\r\n              <img data-aos=\"fade-down\" src={discord_icon} onMouseOver={mouseover} onMouseLeave={mouseleave} id='discordIcon' className='navbarIcon discordIcon' alt='Join Discord'/>\r\n            </a>\r\n            <a href='https://twitter.com/melioraFun' target=\"_blank\">\r\n              <img data-aos=\"fade-down-right\" src={twitter_icon} onMouseOver={mouseover} onMouseLeave={mouseleave} id='twitterIcon' className='navbarIcon twitterIcon' alt='@MelioraFun'/>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n}\r\n//AppEnd\r\n\r\nexport default Navbar","export default __webpack_public_path__ + \"static/media/background2.5631c1a5.png\";","import React from 'react'\r\n\r\n// import background1 from '../../image/background1.png'\r\nimport background2 from '../../image/background2.png'\r\n//import background3 from '../../image/background3.png'\r\n\r\n\r\nimport './background.css'\r\n\r\nconst Background = () => {\r\n\r\n  var mobile_device = false;\r\n  if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n    console.log(\"Mobile device detected\");\r\n    mobile_device = true;\r\n  };\r\n  \r\n  window.addEventListener('scroll', function() {\r\n    const parallax = document.querySelector('.background1Container');\r\n    let scrollPosition = window.scrollY;\r\n\r\n    parallax.style.transform = 'translateY(' + scrollPosition * 0.7 + 'px)';\r\n  });\r\n  return (\r\n    <div className='background'>\r\n      <div className='background1Container' >\r\n        <img src={background2} alt='' className='background1' />\r\n      </div>\r\n      <div className='background2Container' style={{display: 'none'}}>\r\n        <img src={background2} alt='' className='background2'/>\r\n      </div>\r\n      <div className='background3Container' style={{display: 'none'}}>\r\n        <img src={background2} alt='' className='background3' />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Background","export default __webpack_public_path__ + \"static/media/banner-home.4e8ed300.png\";","// To add:\n// 1. Default function for calling any contract that makes sure there will be no errors,\n//    waits for any missing information, and has error handling.\n//      -This will include confirming that providers._network is defined\n\n// Admin page:\n// 1. Import admin settings from json, then create backup copy, then edit json to modify site\n// 2. Detailed settings for individual pages such as website.com/avatar are modified at website.com/admin/avatar\n//    Then, gate all /admin pages behind admin login\n\n// Web3 Oracles\n// 1. Supra\n// 2. Gelato\n// 3. ChainLink\n\n\n\n\n\n\n\n//--------------------------------------------------------------------------------------------------\n//# Imports\n\nimport { FormatTypes, Interface } from \"@ethersproject/abi\";\n\nconst fs = require(\"fs\");\nconst { ethers } = require(\"ethers\");\n//const { utils } = require('ethers').utils;\n//const { BigNumber } = require('ethers').BigNumber;\n\n\n\n\n\n\n\n\n\n//--------------------------------------------------------------------------------------------------\n//# Variable Declaration\n\nlet run_on_load = false;\nconst default_contract_name = 'MelioraComicV1';\n\nlet contract_dict = {'default': {},\n                     'Signatures': {'Address': {'mainnet': '',\n                                                'goerli': '0x22d95fff7bb4e88bf1651daea74e36896919dbc0',\n                                                'sepolia': '0x1Fd69E3941030940f58e537B15bea96F5e766291', \n                                                'optimism': '',\n                                                'optimism_sepolia': '0x1Fd69E3941030940f58e537B15bea96F5e766291'},\n                                   'ABI': `[{\n                                    \"inputs\": [],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"constructor\"\n                                  },\n                                  {\n                                    \"anonymous\": false,\n                                    \"inputs\": [\n                                      {\n                                        \"indexed\": true,\n                                        \"internalType\": \"address\",\n                                        \"name\": \"owner\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"indexed\": true,\n                                        \"internalType\": \"address\",\n                                        \"name\": \"approved\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"indexed\": true,\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"tokenId\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"Approval\",\n                                    \"type\": \"event\"\n                                  },\n                                  {\n                                    \"anonymous\": false,\n                                    \"inputs\": [\n                                      {\n                                        \"indexed\": true,\n                                        \"internalType\": \"address\",\n                                        \"name\": \"owner\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"indexed\": true,\n                                        \"internalType\": \"address\",\n                                        \"name\": \"operator\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"bool\",\n                                        \"name\": \"approved\",\n                                        \"type\": \"bool\"\n                                      }\n                                    ],\n                                    \"name\": \"ApprovalForAll\",\n                                    \"type\": \"event\"\n                                  },\n                                  {\n                                    \"anonymous\": false,\n                                    \"inputs\": [\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"_fromTokenId\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"_toTokenId\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"BatchMetadataUpdate\",\n                                    \"type\": \"event\"\n                                  },\n                                  {\n                                    \"anonymous\": false,\n                                    \"inputs\": [\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"_tokenId\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"MetadataUpdate\",\n                                    \"type\": \"event\"\n                                  },\n                                  {\n                                    \"anonymous\": false,\n                                    \"inputs\": [\n                                      {\n                                        \"indexed\": true,\n                                        \"internalType\": \"address\",\n                                        \"name\": \"previousOwner\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"indexed\": true,\n                                        \"internalType\": \"address\",\n                                        \"name\": \"newOwner\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"name\": \"OwnershipTransferred\",\n                                    \"type\": \"event\"\n                                  },\n                                  {\n                                    \"anonymous\": false,\n                                    \"inputs\": [\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"token_ID\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"address\",\n                                        \"name\": \"user_address\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"name\": \"PrimaryTokenAssigned\",\n                                    \"type\": \"event\"\n                                  },\n                                  {\n                                    \"anonymous\": false,\n                                    \"inputs\": [\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"task_ID\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"string\",\n                                        \"name\": \"task_tags\",\n                                        \"type\": \"string\"\n                                      },\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"bytes32\",\n                                        \"name\": \"task_hash\",\n                                        \"type\": \"bytes32\"\n                                      },\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"task_timestamp\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"address\",\n                                        \"name\": \"completer_address\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"name\": \"TaskCompleted\",\n                                    \"type\": \"event\"\n                                  },\n                                  {\n                                    \"anonymous\": false,\n                                    \"inputs\": [\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"task_count\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"task_ID\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"string\",\n                                        \"name\": \"task_tags\",\n                                        \"type\": \"string\"\n                                      },\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"string\",\n                                        \"name\": \"task_metadata_URI\",\n                                        \"type\": \"string\"\n                                      },\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"bytes32\",\n                                        \"name\": \"task_hash\",\n                                        \"type\": \"bytes32\"\n                                      }\n                                    ],\n                                    \"name\": \"TaskCreated\",\n                                    \"type\": \"event\"\n                                  },\n                                  {\n                                    \"anonymous\": false,\n                                    \"inputs\": [\n                                      {\n                                        \"indexed\": true,\n                                        \"internalType\": \"address\",\n                                        \"name\": \"from\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"indexed\": true,\n                                        \"internalType\": \"address\",\n                                        \"name\": \"to\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"indexed\": true,\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"tokenId\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"Transfer\",\n                                    \"type\": \"event\"\n                                  },\n                                  {\n                                    \"anonymous\": false,\n                                    \"inputs\": [\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"address\",\n                                        \"name\": \"user_address\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"indexed\": false,\n                                        \"internalType\": \"uint16\",\n                                        \"name\": \"whitelist_tier\",\n                                        \"type\": \"uint16\"\n                                      }\n                                    ],\n                                    \"name\": \"WhitelistAssigned\",\n                                    \"type\": \"event\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"task_ID\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"task_tags\",\n                                        \"type\": \"string\"\n                                      },\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"task_metadata_URI\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"name\": \"__createTask\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"bytes32\",\n                                        \"name\": \"task_hash\",\n                                        \"type\": \"bytes32\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"token_URI\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"name\": \"__mintFree\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"token_ID\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"new_collectionInfoURI\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"name\": \"__setContractURI\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"old_collectionInfoURI\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"new_max_supply\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"__setMaxSupply\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"old_max_supply\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"new_price\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"internalType\": \"uint16\",\n                                        \"name\": \"whitelist_tier\",\n                                        \"type\": \"uint16\"\n                                      }\n                                    ],\n                                    \"name\": \"__setMintPrice\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"old_price\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"token_ID\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"user_address\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"name\": \"__setPrimaryTokenID\",\n                                    \"outputs\": [],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"token_ID\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"token_URI\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"name\": \"__setTokenURI\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"old_token_URI\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [],\n                                    \"name\": \"_maxSupply\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"to\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"tokenId\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"approve\",\n                                    \"outputs\": [],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"owner\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"name\": \"balanceOf\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"characters\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"metadata_URI\",\n                                        \"type\": \"string\"\n                                      },\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"tasks_completed\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [],\n                                    \"name\": \"collectionInfoURI\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"task_ID\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"task_tags\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"name\": \"completeTask\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"bytes32\",\n                                        \"name\": \"task_hash\",\n                                        \"type\": \"bytes32\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [],\n                                    \"name\": \"contractURI\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"tokenId\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"getApproved\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"token_ID\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"getCharacter\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"\",\n                                        \"type\": \"string\"\n                                      },\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"internalType\": \"uint256[]\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256[]\"\n                                      },\n                                      {\n                                        \"internalType\": \"string[]\",\n                                        \"name\": \"\",\n                                        \"type\": \"string[]\"\n                                      },\n                                      {\n                                        \"internalType\": \"bytes32[]\",\n                                        \"name\": \"\",\n                                        \"type\": \"bytes32[]\"\n                                      },\n                                      {\n                                        \"internalType\": \"uint256[]\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256[]\"\n                                      },\n                                      {\n                                        \"internalType\": \"address[]\",\n                                        \"name\": \"\",\n                                        \"type\": \"address[]\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [],\n                                    \"name\": \"getMaxSupply\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint16\",\n                                        \"name\": \"whitelist_tier\",\n                                        \"type\": \"uint16\"\n                                      }\n                                    ],\n                                    \"name\": \"getMintPrice\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"index\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"getPrimaryHolderByIndex\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [],\n                                    \"name\": \"getPrimaryHolderCount\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"user_address\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"name\": \"getPrimaryTokenID\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"token_ID\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"user_address\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"name\": \"getPrimaryTokenURI\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"_tokenURI\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"task_ID\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"task_tags\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"name\": \"getTask\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"\",\n                                        \"type\": \"string\"\n                                      },\n                                      {\n                                        \"internalType\": \"bytes32\",\n                                        \"name\": \"\",\n                                        \"type\": \"bytes32\"\n                                      },\n                                      {\n                                        \"internalType\": \"address[]\",\n                                        \"name\": \"\",\n                                        \"type\": \"address[]\"\n                                      },\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"task_ID\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"task_tags\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"name\": \"getTaskHash\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"bytes32\",\n                                        \"name\": \"task_hash\",\n                                        \"type\": \"bytes32\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"user_address\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"name\": \"getWhitelistTier\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint16\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint16\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"name\": \"holderPrimaryTokens\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"owner\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"operator\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"name\": \"isApprovedForAll\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"bool\",\n                                        \"name\": \"\",\n                                        \"type\": \"bool\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"token_URI\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"name\": \"mint\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"token_ID\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"payable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint16\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint16\"\n                                      }\n                                    ],\n                                    \"name\": \"mint_limits\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint16\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint16\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint16\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint16\"\n                                      }\n                                    ],\n                                    \"name\": \"mint_prices\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [],\n                                    \"name\": \"name\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [],\n                                    \"name\": \"owner\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"tokenId\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"ownerOf\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"primaryTokenHolderIndex\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [],\n                                    \"name\": \"renounceOwnership\",\n                                    \"outputs\": [],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"from\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"to\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"tokenId\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"safeTransferFrom\",\n                                    \"outputs\": [],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"from\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"to\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"tokenId\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"internalType\": \"bytes\",\n                                        \"name\": \"data\",\n                                        \"type\": \"bytes\"\n                                      }\n                                    ],\n                                    \"name\": \"safeTransferFrom\",\n                                    \"outputs\": [],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"operator\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"internalType\": \"bool\",\n                                        \"name\": \"approved\",\n                                        \"type\": \"bool\"\n                                      }\n                                    ],\n                                    \"name\": \"setApprovalForAll\",\n                                    \"outputs\": [],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"token_ID\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"setPrimaryTokenID\",\n                                    \"outputs\": [],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"bytes4\",\n                                        \"name\": \"interfaceId\",\n                                        \"type\": \"bytes4\"\n                                      }\n                                    ],\n                                    \"name\": \"supportsInterface\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"bool\",\n                                        \"name\": \"\",\n                                        \"type\": \"bool\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [],\n                                    \"name\": \"symbol\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"bytes32\",\n                                        \"name\": \"\",\n                                        \"type\": \"bytes32\"\n                                      }\n                                    ],\n                                    \"name\": \"taskHashArray\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"tasks\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"metadata_URI\",\n                                        \"type\": \"string\"\n                                      },\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"task_ID\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"task_tags\",\n                                        \"type\": \"string\"\n                                      },\n                                      {\n                                        \"internalType\": \"bytes32\",\n                                        \"name\": \"task_hash\",\n                                        \"type\": \"bytes32\"\n                                      },\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"task_creation_timestamp\",\n                                        \"type\": \"uint256\"\n                                      },\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"task_creator_address\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"tokenId\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"tokenURI\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"string\",\n                                        \"name\": \"\",\n                                        \"type\": \"string\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"from\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"to\",\n                                        \"type\": \"address\"\n                                      },\n                                      {\n                                        \"internalType\": \"uint256\",\n                                        \"name\": \"tokenId\",\n                                        \"type\": \"uint256\"\n                                      }\n                                    ],\n                                    \"name\": \"transferFrom\",\n                                    \"outputs\": [],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"newOwner\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"name\": \"transferOwnership\",\n                                    \"outputs\": [],\n                                    \"stateMutability\": \"nonpayable\",\n                                    \"type\": \"function\"\n                                  },\n                                  {\n                                    \"inputs\": [\n                                      {\n                                        \"internalType\": \"address\",\n                                        \"name\": \"\",\n                                        \"type\": \"address\"\n                                      }\n                                    ],\n                                    \"name\": \"whitelist_tiers\",\n                                    \"outputs\": [\n                                      {\n                                        \"internalType\": \"uint16\",\n                                        \"name\": \"\",\n                                        \"type\": \"uint16\"\n                                      }\n                                    ],\n                                    \"stateMutability\": \"view\",\n                                    \"type\": \"function\"\n                                  }]`,\n                                   'Functions': {'mint': {'number_of_inputs': 1},\n                                                 '__mintFree': {'number_of_inputs': 1},\n                                                 'contractURI': {'number_of_inputs': 0},\n                                                 '__setContractURI': {'number_of_inputs': 1},\n                                                 'getMintPrice': {'number_of_inputs': 0},\n                                                 '__setMintPrice': {'number_of_inputs': 1},\n                                                 'getMaxSupply': {'number_of_inputs': 0},\n                                                 '__setMaxSupply': {'number_of_inputs': 1},\n                                                 'tokenURI': {'number_of_inputs': 1},\n                                                 '__setTokenURI': {'number_of_inputs': 2},\n                                                 'lockToken': {'number_of_inputs': 2},\n                                                 '__lockToken': {'number_of_inputs': 2},\n                                                 'unlockToken': {'number_of_inputs': 1},\n                                                 '__unlockToken': {'number_of_inputs': 1},\n                                                 'getTimeLocked': {'number_of_inputs': 1},\n                                                 'getLocked': {'number_of_inputs': 1},\n                                                 'getPrimaryTokenID': {'number_of_inputs': 1},\n                                                 'setPrimaryTokenID': {'number_of_inputs': 2},\n                                                 'getPrimaryTokenURI': {'number_of_inputs': 1},\n                                                 'getPrimaryHolderByIndex': {'number_of_inputs': 1},\n                                                 'getPrimaryHolderCount': {'number_of_inputs': 0},\n                                                 '__createTask': {'number_of_inputs': 3},\n                                                 'getTaskHash': {'number_of_inputs': 2},\n                                                 'getTask': {'number_of_inputs': 2},\n                                                 'getCharacter': {'number_of_inputs': 1},\n                                                 'completeTask': {'number_of_inputs': 2},\n                                                 'completeTaskBatch': {'number_of_inputs': 2},\n                                                 'setApprovalForAll': {'number_of_inputs': 2}}},\n                     'MelioraComicV1': {'Address': {'mainnet': '',\n                                                    'goerli': '',\n                                                    'sepolia': '0xb4cA8f64B5b891ca72398FB6c143266a9B582dba', \n                                                    'optimism': '',\n                                                    'optimism_sepolia': '0xDd87063B0fb8F7b13AFA7886F51106013004744f'},\n                                          'ABI': `[{\n                                            \"inputs\": [],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"constructor\"\n                                          },\n                                          {\n                                            \"anonymous\": false,\n                                            \"inputs\": [\n                                              {\n                                                \"indexed\": true,\n                                                \"internalType\": \"address\",\n                                                \"name\": \"owner\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"indexed\": true,\n                                                \"internalType\": \"address\",\n                                                \"name\": \"approved\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"indexed\": true,\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"tokenId\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"Approval\",\n                                            \"type\": \"event\"\n                                          },\n                                          {\n                                            \"anonymous\": false,\n                                            \"inputs\": [\n                                              {\n                                                \"indexed\": true,\n                                                \"internalType\": \"address\",\n                                                \"name\": \"owner\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"indexed\": true,\n                                                \"internalType\": \"address\",\n                                                \"name\": \"operator\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"indexed\": false,\n                                                \"internalType\": \"bool\",\n                                                \"name\": \"approved\",\n                                                \"type\": \"bool\"\n                                              }\n                                            ],\n                                            \"name\": \"ApprovalForAll\",\n                                            \"type\": \"event\"\n                                          },\n                                          {\n                                            \"anonymous\": false,\n                                            \"inputs\": [\n                                              {\n                                                \"indexed\": false,\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"_fromTokenId\",\n                                                \"type\": \"uint256\"\n                                              },\n                                              {\n                                                \"indexed\": false,\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"_toTokenId\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"BatchMetadataUpdate\",\n                                            \"type\": \"event\"\n                                          },\n                                          {\n                                            \"anonymous\": false,\n                                            \"inputs\": [\n                                              {\n                                                \"indexed\": false,\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"_tokenId\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"MetadataUpdate\",\n                                            \"type\": \"event\"\n                                          },\n                                          {\n                                            \"anonymous\": false,\n                                            \"inputs\": [\n                                              {\n                                                \"indexed\": true,\n                                                \"internalType\": \"address\",\n                                                \"name\": \"previousOwner\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"indexed\": true,\n                                                \"internalType\": \"address\",\n                                                \"name\": \"newOwner\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"name\": \"OwnershipTransferred\",\n                                            \"type\": \"event\"\n                                          },\n                                          {\n                                            \"anonymous\": false,\n                                            \"inputs\": [\n                                              {\n                                                \"indexed\": true,\n                                                \"internalType\": \"address\",\n                                                \"name\": \"from\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"indexed\": true,\n                                                \"internalType\": \"address\",\n                                                \"name\": \"to\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"indexed\": true,\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"tokenId\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"Transfer\",\n                                            \"type\": \"event\"\n                                          },\n                                          {\n                                            \"anonymous\": false,\n                                            \"inputs\": [\n                                              {\n                                                \"indexed\": false,\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"whitelist_tier\",\n                                                \"type\": \"uint16\"\n                                              },\n                                              {\n                                                \"indexed\": false,\n                                                \"internalType\": \"address\",\n                                                \"name\": \"user_address\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"name\": \"WhitelistAssigned\",\n                                            \"type\": \"event\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"token_URI\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"name\": \"__mintFree\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"token_ID\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"new_collectionInfoURI\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"name\": \"__setContractURI\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"old_collectionInfoURI\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"token_URI\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"name\": \"__setDefaultTokenURI\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"old_default_token_URI\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address payable\",\n                                                \"name\": \"recipient_address\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"fund_weight\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"name\": \"__setFundRecipientWeight\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"old_fund_weight\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"new_max_supply\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"__setMaxSupply\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"old_max_supply\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"whitelist_tier\",\n                                                \"type\": \"uint16\"\n                                              },\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"new_limit\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"name\": \"__setMintLimit\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"old_limit\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"whitelist_tier\",\n                                                \"type\": \"uint16\"\n                                              },\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"new_price\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"__setMintPrice\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"old_price\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"token_ID\",\n                                                \"type\": \"uint256\"\n                                              },\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"token_URI\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"name\": \"__setTokenURI\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"old_token_URI\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"token_URI\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"name\": \"__setUniqueTokenBaseURI\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"old_unique_token_base_URI\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"new_unique_token_maxSupply\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"__setUniqueTokenMaxSupply\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"old_unique_token_maxSupply\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"new_whitelist_minimum_requirement\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"name\": \"__setWhitelistMinimumRequirement\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"old_whitelist_minimum_requirement\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"new_whitelist_tier\",\n                                                \"type\": \"uint16\"\n                                              },\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"user_address\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"name\": \"__setWhitelistTier\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"old_whitelist_tier\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"__updateAllDefaultTokenURIs\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"current_supply\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"__updateAllUniqueTokenURIs\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"current_supply\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"_maxSupply\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"to\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"tokenId\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"approve\",\n                                            \"outputs\": [],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"owner\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"name\": \"balanceOf\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"collectionInfoURI\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"contractURI\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"defaultTokenURI\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"fund_recipient_addresses\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"address payable\",\n                                                \"name\": \"\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"name\": \"fund_recipient_weights\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"tokenId\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"getApproved\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"getCurrentSupply\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"getDefaultTokenURI\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"getFundRecipientCount\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"recipient_address\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"name\": \"getFundRecipientWeight\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"getMaxSupply\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"whitelist_tier\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"name\": \"getMintLimit\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"whitelist_tier\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"name\": \"getMintPrice\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"getMyMintLimit\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"getMyMintPrice\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"getTotalFundWeight\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"getUniqueTokenBaseURI\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"getUniqueTokenMaxSupply\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"getUniqueTokenSupply\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"unique_token_supply\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"user_address\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"name\": \"getUserMintLimit\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"user_address\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"name\": \"getUserMintPrice\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"getWhitelistMinimumRequirement\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"user_address\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"name\": \"getWhitelistTier\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"owner\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"operator\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"name\": \"isApprovedForAll\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"bool\",\n                                                \"name\": \"\",\n                                                \"type\": \"bool\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"mint\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"token_ID\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"payable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"name\": \"mint_counts\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"name\": \"mint_limits\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"name\": \"mint_prices\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"name\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"owner\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"tokenId\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"ownerOf\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"renounceOwnership\",\n                                            \"outputs\": [],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"from\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"to\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"tokenId\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"safeTransferFrom\",\n                                            \"outputs\": [],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"from\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"to\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"tokenId\",\n                                                \"type\": \"uint256\"\n                                              },\n                                              {\n                                                \"internalType\": \"bytes\",\n                                                \"name\": \"data\",\n                                                \"type\": \"bytes\"\n                                              }\n                                            ],\n                                            \"name\": \"safeTransferFrom\",\n                                            \"outputs\": [],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"operator\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"internalType\": \"bool\",\n                                                \"name\": \"approved\",\n                                                \"type\": \"bool\"\n                                              }\n                                            ],\n                                            \"name\": \"setApprovalForAll\",\n                                            \"outputs\": [],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"bytes4\",\n                                                \"name\": \"interfaceId\",\n                                                \"type\": \"bytes4\"\n                                              }\n                                            ],\n                                            \"name\": \"supportsInterface\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"bool\",\n                                                \"name\": \"\",\n                                                \"type\": \"bool\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"symbol\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"tokenId\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"tokenURI\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"total_fund_weight\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"from\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"to\",\n                                                \"type\": \"address\"\n                                              },\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"tokenId\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"name\": \"transferFrom\",\n                                            \"outputs\": [],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"newOwner\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"name\": \"transferOwnership\",\n                                            \"outputs\": [],\n                                            \"stateMutability\": \"nonpayable\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"uniqueTokenBaseURI\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"string\",\n                                                \"name\": \"\",\n                                                \"type\": \"string\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"unique_token_maxSupply\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint256\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint256\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [],\n                                            \"name\": \"whitelist_minimum_requirement\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          },\n                                          {\n                                            \"inputs\": [\n                                              {\n                                                \"internalType\": \"address\",\n                                                \"name\": \"\",\n                                                \"type\": \"address\"\n                                              }\n                                            ],\n                                            \"name\": \"whitelist_tiers\",\n                                            \"outputs\": [\n                                              {\n                                                \"internalType\": \"uint16\",\n                                                \"name\": \"\",\n                                                \"type\": \"uint16\"\n                                              }\n                                            ],\n                                            \"stateMutability\": \"view\",\n                                            \"type\": \"function\"\n                                          }]`,\n                                          'Functions': {'mint': [],\n                                                        '__mintFree': ['token_URI'],\n                                                        'contractURI': [],\n                                                        '__setContractURI': ['new_contract_URI'],\n                                                        'getCurrentSupply': [],\n                                                        'getMaxSupply': [],\n                                                        '__setMaxSupply': ['new_max_supply'],\n                                                        'getUniqueTokenSupply': [],\n                                                        'getUniqueTokenMaxSupply': [],\n                                                        '__setUniqueTokenMaxSupply': ['new_unique_token_maxSupply'],\n                                                        'getWhitelistTier': ['user_address'],\n                                                        '__setWhitelistTier': ['whitelist_tier', 'user_address'],\n                                                        'getWhitelistMinimumRequirement': [],\n                                                        '__setWhitelistMinimumRequirement': ['new_whitelist_minimum_requirement'],\n                                                        'getMintPrice': ['whitelist_tier'],\n                                                        'getUserMintPrice': ['user_address'],\n                                                        'getMyMintPrice': [],\n                                                        '__setMintPrice': ['whitelist_tier', 'new_mint_price'],\n                                                        'getMintLimit': ['whitelist_tier'],\n                                                        'getUserMintLimit': ['user_address'],\n                                                        'getMyMintLimit': [],\n                                                        '__setMintLimit': ['whitelist_tier', 'mint_limit'],\n                                                        'tokenURI': ['token_ID'],\n                                                        '__setTokenURI': ['token_ID', 'new_token_URI'],\n                                                        'getDefaultTokenURI': [],\n                                                        '__setDefaultTokenURI': ['defaultTokenURI'],\n                                                        'getUniqueTokenBaseURI': [],\n                                                        '__setUniqueTokenBaseURI': ['uniqueTokenBaseURI'],\n                                                        '__updateAllDefaultTokenURIs': [],\n                                                        '__updateAllUniqueTokenURIs': [],\n                                                        '__setFundRecipientWeight' : ['recipient_address', 'fund_weight'],\n                                                        'getFundRecipientWeight': ['recipient_address'],\n                                                        'getFundRecipientCount': [],\n                                                        'getTotalFundWeight': [],\n                                                        'setApprovalForAll': ['thing_1', 'thing_2']}},\n                     'LMNTL': {'Address': {'mainnet': '',\n                                           'goerli': '0xA70CB9f3768D9AEdF7390Fed92770dCDdE1D0C1D',\n                                           'hyperspace': '0xB4fECac2F5BdEc2eD15547cF857464c8691b9849'},\n                               'ABI': `[]`,\n                               'Functions': {'mint': {'number_of_inputs': 1}}}};\n\n\ncontract_dict['default'] = contract_dict[default_contract_name];\n\n\n\n\n// *Update metadata URIs with your IPFS files' information\nconst folder_URIs = {\n  NFT_Storage: 'bafybeiglxxim4fc4jxl53kxoxjsnrf7efcabx4jikrgrz2ralmgqlj6yai',\n  Pinata: 'QmcvaEQrzwiNjDZzJX1jBq5zDtvF9yc2Le6nyjquABEGmh',\n  Pinata_old: 'QmPF4nrDbTnGk2UWduZDw2FCHZcF6HJicYDdsDAkEqJgH7'};\n\nconst JSON_URIs = {\n  NFT_Storage: {0:'/LMNTLfire1.json',\n                1:'/LMNTLwater1.json',\n                2:'/LMNTLair1.json',\n                3:'/LMNTLearth1.json',\n                4:'/LMNTLfire2.json',\n                5:'/LMNTLwater2.json',\n                6:'/LMNTLair2.json',\n                7:'/LMNTLearth2.json',\n                background_list: \"bafybeicc2gguyju7625a3c6ie2gyukggwhgcle64a73bo4yxrtrr6zf2fi/background_list.json\",\n                pac_list: \"bafybeigmgu2k25bxwjmwxwrr2kwiwzzjpuy3mzew2yochngedqof5zgmu4/pac_list.json\"},\n  Pinata: {0:'/LMNTLfire1.json',\n           1:'/LMNTLwater1.json',\n           2:'/LMNTLair1.json',\n           3:'/LMNTLearth1.json',\n           4:'/LMNTLfire2.json',\n           5:'/LMNTLwater2.json',\n           6:'/LMNTLair2.json',\n           7:'/LMNTLearth2.json'},\n  Pinata_old: {0:'/LMNTLfire1.png',\n           1:'/LMNTLwater1.png',\n           2:'/LMNTLair1.png',\n           3:'/LMNTLearth1.png',\n           4:'/LMNTLfire2.png',\n           5:'/LMNTLwater2.png',\n           6:'/LMNTLair2.png',\n           7:'/LMNTLearth2.png'}};\n\nconst network_IPFS_dict = {'mainnet': 'Pinata',\n                           'goerli': 'NFT_Storage',\n                           'hyperspace': 'NFT_Storage',\n                           'sepolia': 'NFT_Storage'};\n\nconst IPFS_prefixes = {\n  Pinata: 'https://gateway.pinata.cloud/ipfs/',\n  Pinata_old: 'https://gateway.pinata.cloud/ipfs/',\n  Infura: '',\n  NFT_Storage: 'https://nftstorage.link/ipfs/'\n};\n\nconst network_dict = {'default': {},\n                      'goerli': {'name': 'goerli',\n                                 'chainId': 5,\n                                 'url': ''},\n                      'polygon': {'name': 'polygon',\n                                  'chainId': 137,\n                                  'url': ''},\n                      'sepolia': {'name': 'sepolia',\n                                  'chainId': 11155111,\n                                  'url': ''},\n                      'optimism': {'name': 'optimism',\n                                   'chainId': 10,\n                                   'url': ''},\n                      'optimism_sepolia': {'name': 'optimism_sepolia',\n                                           'chainId': 11155420,\n                                           'url': ''},\n                      5: {'name': 'goerli',\n                                 'chainId': 5,\n                                 'url': ''},\n                      137: {'name': 'polygon',\n                                  'chainId': 137,\n                                  'url': ''},\n                      11155111: {'name': 'sepolia',\n                                  'chainId': 11155111,\n                                  'url': ''},\n                      10: {'name': 'optimism',\n                                   'chainId': 10,\n                                   'url': ''},\n                      11155420: {'name': 'optimism_sepolia',\n                                           'chainId': 11155420,\n                                           'url': ''}};\n\nconst default_network = 'sepolia';\nvar network_name = default_network;\nvar network_ID = network_dict[default_network]['chainId'];\nnetwork_dict['default'] = network_dict[default_network];\n\nconst opensea_link_delay = 8;\nconst opensea_prefixes = {\n  'mainnet': 'https://opensea.io/assets/ethereum/',\n  'goerli': 'https://testnets.opensea.io/assets/goerli/',\n  'sepolia': 'https://testnets.opensea.io/assets/sepolia/',\n  'hyperspace': ''\n};\n\n// These variables are set as Context variables to be accessed by other components\nvar user_address, user_token_ID, user_metadata_URI, user_metadata, user_avatar_URI, user_balance, contract_name;\n\nvar provider, signer, user_web_wallet;\n\n\n\nvar user_minted_NFT = false;\n\n\n\n\n\n\n\n\n\n//--------------------------------------------------------------------------------------------------\n//# Basic Functions\n\n//const [address, toggleConnected] = useState(0);\n//const [isMinted, toggleMinted] = useState(0);\n\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n\nfunction pause(time) {\n  return new Promise(resolve => setTimeout(resolve, time));\n}\n\n\n\n\n\n\n\n//--------------------------------------------------------------------------------------------------\n//# Wallet & Metadata Functions\n\nif (run_on_load) {\n  onLoad();\n};\nasync function onLoad () {\n  if (run_on_load) {\n    run_on_load = false;\n    await connectWallet();\n    contract_dict['Signatures']['Functions'] = await parseABI(contract_dict['Signatures']['ABI']);\n    console.log(\"Functions:\", contract_dict['Signatures']['Functions']);\n    \n  }\n}\n\n\nasync function setProvider() {\n  provider = new ethers.providers.Web3Provider(window.ethereum);\n  console.log('Provider: ', provider);\n  user_web_wallet = provider['connection']['url'];\n  console.log('Web Wallet: ', user_web_wallet);\n  if ('_network' in provider) {\n    network_name = provider['_network']['name'];\n    console.log('Network: ', network_name);\n  };\n  return(provider);\n};\n\n\nasync function setSigner(provider_input) {\n  if (!provider_input) {\n    provider_input = provider;\n  };\n  if (!provider_input) {\n    provider_input = await setProvider();\n  };\n  // Prompt user for account connections\n  await provider_input.send(\"eth_requestAccounts\", []);\n  signer = await provider_input.getSigner();\n  console.log('Signer: ', signer);\n  return(signer);\n};\n\n\nasync function setUserAddress(signer_input) {\n  if (!signer_input) {\n    signer_input = signer;\n  };\n  if (!signer_input) {\n    signer_input = await setSigner();\n  };\n  user_address = await signer_input.getAddress();\n  console.log('Address: ', user_address);\n  return(user_address);\n}\n\n\nasync function setUserBalance(signer_input) {\n  if (!signer_input) {\n    signer_input = signer;\n  };\n  if (!signer_input) {\n    signer_input = await setSigner();\n  };\n  user_balance = await signer_input.getBalance();\n  user_balance = ethers.utils.formatEther(user_balance);\n  console.log('Balance: ', user_balance);\n  return user_balance;\n};\n\n\nexport async function setUserTokenID(contract_name_input, address_input) {\n  // Set user address\n  if (!address_input) {\n    address_input = user_address;\n  };\n  if (!address_input) {\n    address_input = await setUserAddress();\n  };\n\n  // Set contract name\n  if (!contract_name_input) {\n    contract_name_input = contract_name;\n  };\n  if (!contract_name_input) {\n    contract_name_input = default_contract_name;\n  };\n\n  const contract = new ethers.Contract(contract_dict[contract_name_input]['Address'][network_name], contract_dict[contract_name_input]['ABI'], provider);\n  user_token_ID = await contract.getPrimaryTokenID(address_input);\n  console.log('User Token ID: ', user_token_ID);\n  return user_token_ID;\n};\n\n\nexport async function setUserMetadata(contract_name_input, address_input) {\n  // Set user address\n  if (!address_input) {\n    address_input = user_address;\n  };\n  if (!address_input) {\n    address_input = await setUserAddress();\n  };\n\n  // Set contract name\n  if (!contract_name_input) {\n    contract_name_input = contract_name;\n  };\n  if (!contract_name_input) {\n    contract_name_input = default_contract_name;\n  };\n\n  const contract = new ethers.Contract(contract_dict[contract_name_input]['Address'][network_name], contract_dict[contract_name_input]['ABI'], provider);\n  user_metadata_URI = await contract.getPrimaryTokenURI(address_input);\n  if (user_metadata_URI.includes('.json')) {\n    try {\n      const response = await fetch(user_metadata_URI);\n      user_metadata = await response.json();\n      user_metadata['URI'] = user_metadata_URI;\n      console.log('User Metadata: ', user_metadata);\n      return user_metadata;\n    } catch(error) {\n      console.log('setUserMetadata Error:', error.message);\n    };\n  } else {\n    return user_metadata_URI;\n  };\n};\n\n\nexport async function setUserAvatarURI(metadata_input) {\n  if (!metadata_input) {\n    metadata_input = user_metadata;\n  };\n  if (!metadata_input) {\n    metadata_input = await setUserMetadata();\n  };\n  if (typeof(metadata_input) === 'string') {\n    user_avatar_URI = metadata_input;\n  } else {\n    user_avatar_URI = metadata_input['image'];\n  }\n  console.log('User Avatar URI: ', user_avatar_URI);\n  return user_avatar_URI;\n};\n\n\nexport async function getMetadataURI(metadata_info) {\n  if (!network_name) {\n    network_name = getNetwork();\n  }\n  var metadata_URI;\n  const IPFS_name = network_IPFS_dict[network_name];\n\n  // Pre-set Image URI\n  if (JSON_URIs[IPFS_name][metadata_info]) {\n    metadata_URI = IPFS_prefixes[IPFS_name] + folder_URIs[IPFS_name] + JSON_URIs[IPFS_name][metadata_info];\n  } else {\n    metadata_URI = IPFS_prefixes[IPFS_name] + metadata_info;\n  };\n  return metadata_URI;\n};\n\nexport async function getOpenSeaLink(contract_name_input, token_ID_input) {\n  if (!token_ID_input) {\n    token_ID_input = user_token_ID;\n  };\n  if (!token_ID_input) {\n    token_ID_input = await setUserTokenID(contract_name_input);\n  };\n\n  var contract_address;\n  if (contract_dict[contract_name_input]) {\n    contract_address = contract_dict[contract_name_input]['Address'][network_name];\n  } else {\n    contract_address = contract_name_input;\n  };\n\n  var opensea_link = opensea_prefixes[network_name] + contract_address + '/' + token_ID_input;\n  console.log('OpenSea Link: ', opensea_link);\n  return opensea_link;\n}\n\n\nexport async function getNetwork() {\n  if (!network_name) {\n    provider = await setProvider();\n    if ('_network' in provider) {\n      network_name = provider['_network']['name'];\n    };\n  };\n  console.log('Network Name: ', network_name);\n  return network_name;\n}\n\nexport async function getJSONfromIPFS(metadata_URI_input) {\n  console.log('\\nSmartContractOperator >>> RUNNING getJSONfromIPFS()');\n  if (metadata_URI_input) {\n    console.log(\"metadata_URI_input:\", metadata_URI_input);\n    var metadata_URI;\n    if (!metadata_URI_input.includes('http')) {\n      metadata_URI = getMetadataURI(metadata_URI_input);\n    } else {\n      metadata_URI = metadata_URI_input;\n    };\n    const response = await fetch(metadata_URI);\n    const JSON_contents = await response.json();\n    console.log('JSON Contents: ', JSON_contents);\n    return JSON_contents;\n  } else {\n    console.log('No metadata URI input!')\n  };\n};\n\n\nasync function getContractInfo(contract_name_input) {\n  const shit = 'balls';\n  //return({contract_address, contract_functions with number of inputs})\n}\n\n\nasync function promptNetworkSwitch (network_name_input) {\n  console.log('\\nSmartContractOperator >>> RUNNING promptNetworkSwitch()');\n  console.log('network_name_input:', network_name_input);\n  var network_switched = false;\n  if (network_name_input === 'polygon' || network_name_input === 'matic') {\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: \"0x89\" }],\n    });\n    network_switched = true;\n  } else if (network_name_input === 'goerli') {\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: \"0x5\" }],\n    });\n    network_switched = true;\n  };\n\n  if (network_switched) {\n    network_name = network_name_input;\n    network_switched = false;\n    window.location.reload();\n  }\n};\n\n\nexport async function promptAddNetwork(network_name_input) {\n  //if (!network_name_input || !network_dict.includes(network_name_input)) {\n  //  network_name_input = default_network;\n  //};\n  if (network_name_input === 'polygon' || network_name_input === 'matic') {\n    window.ethereum.request({\n      method: \"wallet_addEthereumChain\",\n      params: [{\n          chainId: \"0x89\",\n          rpcUrls: [\"https://rpc-mainnet.matic.network/\"],\n          chainName: \"Matic Mainnet\",\n          nativeCurrency: {\n              name: \"MATIC\",\n              symbol: \"MATIC\",\n              decimals: 18\n          },\n          blockExplorerUrls: [\"https://polygonscan.com/\"]\n      }]\n    });\n  };\n  network_name = network_name_input;\n  return network_name;\n};\n\n// changed from \"export default\" to just \"export\" because SmartContractOperator fails to export the function with \"default\" present\nexport async function connectWallet(network_name_input) {\n  console.log('\\nSmartContractOperator >>> RUNNING connectWallet()');\n  console.log(\"network_name_input:\", network_name_input);\n  //contract_name = contract_name_input;\n  provider = await setProvider();\n  signer = await setSigner(provider);\n  user_address = await setUserAddress(signer);\n  user_balance = await setUserBalance(signer);\n  if ('_network' in provider) {\n    network_name = provider['_network']['name'];\n    network_ID = provider['_network']['chainId'];\n    if (!network_dict[network_name]) {\n      network_name = network_dict[network_ID]['name'];\n    };\n    console.log('Network Name: ', network_name);\n  };\n  if (network_name_input && (network_name !== network_name_input)) {\n    console.log('PROMPTED Network Switch to: ', network_name_input);\n    promptNetworkSwitch(network_name_input);\n  };\n  //const contract = new ethers.Contract(contract_address_dict[network_name], json_ABI_list[network_name], provider);\n  //user_token_ID = await setUserTokenID(contract_name, user_address);\n  //user_metadata = await setUserMetadata(contract_name, user_address);\n  //user_avatar_URI = await setUserAvatarURI(user_metadata);\n  return({'address': user_address,\n          'network_name': network_name,\n          //'token_ID': user_token_ID,\n          'balance': user_balance});\n          //'metadata': user_metadata,\n          //'avatar_URI': user_avatar_URI,\n          //'contract_name': contract_name});\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//--------------------------------------------------------------------------------------------------\n//# Smart Contract Functions\n\n\nasync function parseABI(ABI) {\n  console.log('\\nSmartContractOperator >>> RUNNING parseABI()');\n\n  const functions = {};\n\n  // Iterate through each ABI entry\n  for (const entry of ABI) {\n      if (entry.type === 'function') {\n          const inputs = entry.inputs.map(input => input.name); // Extract input parameter names\n          functions[entry.name] = inputs; // Store function name and input parameter names\n      }\n  }\n\n  return functions;\n};\n\n\nasync function extractABI(JSON_file_path) {\n  console.log('\\nSmartContractOperator >>> RUNNING extractABI()');\n  console.log('JSON_file_path:', JSON_file_path);\n  try {\n      // Read the JSON file\n\n  /////THIS LINE GIVES AN ERROR!\n      const JSON_data = fs.readFileSync(JSON_file_path, 'utf8');\n      \n      // Parse the JSON data\n      const contract_data = JSON.parse(JSON_data);\n\n      // Extract and return the ABI\n      const ABI = contract_data.abi;\n      console.log('ABI:', ABI);\n      return ABI;\n  } catch (error) {\n      console.error('Error extracting ABI:', error);\n      return null;\n  };\n};\n\n\nexport async function getFunctionParams(contract_name_input, function_name_input) {\n  const function_params = contract_dict[contract_name_input]['Functions'][function_name_input];\n  return(function_params);\n};\n\n\n//Should take contract address\nexport async function runContractFunction(contract_name_input, function_name, function_params=[], button_text_object=false ) {\n  console.log('Contract Name: ', contract_name_input);\n  console.log('Function Name: ', function_name);\n  console.log('Function Params: ', function_params);\n  console.log('Mint Button: ', button_text_object);\n\n  // Assigns the preset contract address if it exists\n  // If not, `contract_name_input` is assumed to be the address itself\n  var contract_address;\n  if (contract_dict[contract_name_input]) {\n    contract_address = contract_dict[contract_name_input]['Address'][network_name];\n    contract_name = contract_name_input;\n  } else {\n    contract_address = contract_name_input;\n    contract_name = '';\n  };\n\n  console.log('Contract Address:', contract_address);\n  \n  if (!signer) {\n    signer = await setSigner();\n  };\n\n  console.log('address', signer._address);\n\n  const iface = new Interface(contract_dict[contract_name_input]['ABI']);\n  iface.format(FormatTypes.full);\n  const contract = new ethers.Contract(contract_address, iface, signer);\n  const function_input_list = await getFunctionParams(contract_name_input, function_name);\n\n  console.log('function_input_list:', function_input_list);\n  \n  var transaction_info;\n  \n  if (Array.isArray(function_input_list)) {\n    console.log('SmartContractOperator: Using the NEW way!');\n    if (function_name === 'mint') {\n      const mint_price_raw = await contract.getMyMintPrice();\n      console.log('Mint Price RAW:', mint_price_raw);\n      const mint_price_fixed = mint_price_raw / 1000000000000000000;\n      console.log('Mint Price FIXED:', mint_price_fixed);\n      transaction_info = await contract[function_name](...function_params, { value: ethers.utils.parseUnits(mint_price_fixed.toString(), \"ether\") });\n      user_minted_NFT = true;\n    } else {\n      transaction_info = await contract[function_name](...function_params);  \n    }\n  } else {\n    if (function_name === 'mint') {\n      if (contract_name_input === 'MelioraComicV1') {\n        transaction_info = await contract.mint({ value: ethers.utils.parseUnits(\".000000000000005\", \"ether\") });\n        user_minted_NFT = true;\n      } else {\n        transaction_info = await contract.mint(function_params[0], { value: ethers.utils.parseUnits(\".000000000000005\", \"ether\") });\n        user_minted_NFT = true;\n      }\n    } else if (function_name === '__mintFree') {\n      transaction_info = await contract.__mintFree(function_params[0]);\n      user_minted_NFT = true;\n    } else if (function_name === 'contractURI') {\n      transaction_info = await contract.contractURI();\n    } else if (function_name === '__setContractURI') {\n      transaction_info = await contract.__setContractURI(function_params[0]);\n    } else if (function_name === 'getMintPrice') {\n      transaction_info = await contract.getMintPrice(function_params[0]);\n    } else if (function_name === '__setMintPrice') {\n      transaction_info = await contract.__setMintPrice(function_params[0], function_params[1]);\n    } else if (function_name === 'getMaxSupply') {\n      transaction_info = await contract.getMaxSupply();\n    } else if (function_name === '__setMaxSupply') {\n      transaction_info = await contract.__setMaxSupply(function_params[0]);\n    } else if (function_name === 'tokenURI') {\n      transaction_info = await contract.tokenURI(function_params[0]);\n    } else if (function_name === '__setTokenURI') {\n      transaction_info = await contract.__setTokenURI(function_params[0], function_params[1]);\n    } else if (function_name === 'getPrimaryTokenID') {\n      transaction_info = await contract.getPrimaryTokenID(function_params[0]);\n    } else if (function_name === 'setPrimaryTokenID') {\n      transaction_info = await contract.setPrimaryTokenID(function_params[0]);\n    } else if (function_name === 'getPrimaryTokenURI') {\n      transaction_info = await contract.getPrimaryTokenURI(function_params[0]);\n    } else if (function_name === 'getPrimaryHolderByIndex') {\n      transaction_info = await contract.getPrimaryHolderByIndex(function_params[0]);\n    } else if (function_name === 'getPrimaryHolderCount') {\n      transaction_info = await contract.getPrimaryHolderCount();\n    } else if (function_name === 'getAllPrimaryHolders') {\n      transaction_info = await contract.getAllPrimaryHolders();\n    } else if (function_name === '__createTask') {\n      transaction_info = await contract.__createTask(function_params[0], function_params[1], function_params[2]);\n    } else if (function_name === 'getTaskHash') {\n      transaction_info = await contract.getTaskHash(function_params[0], function_params[1]);\n    } else if (function_name === 'getTask') {\n      transaction_info = await contract.getTask(function_params[0], function_params[1]);\n    } else if (function_name === 'getCharacter') {\n      transaction_info = await contract.getCharacter(function_params[0]);\n    } else if (function_name === 'completeTask') {\n      transaction_info = await contract.completeTask(function_params[0], function_params[1]);\n    } else if (function_name === 'completeTaskBatch') {\n      transaction_info = await contract.completeTaskBatch(function_params[0], function_params[1]);\n    } else if (function_name === 'setApprovalForAll') {\n      transaction_info = await contract.setApprovalForAll(function_params[0], function_params[1]);\n    };\n  };\n  console.log(\"Transaction info: \", transaction_info);\n  \n  var transaction_hash = transaction_info.hash;\n  console.log(\"Transaction hash: \", transaction_hash);\n\n  if (transaction_hash) {\n    var transaction_receipt = await provider.getTransactionReceipt(transaction_hash);\n    console.log(\"Immediate transaction receipt: \", transaction_receipt);\n\n    // Button updated & code paused via while loop while awaiting contract execution\n    if (button_text_object) {\n      button_text_object.textContent = \"Executing\";\n      var loop_count = 1;\n      while ( !transaction_receipt ) {\n        await pause(500);\n        if (loop_count > 3) {\n          button_text_object.textContent = \"Executing\";\n          loop_count = 0;\n        } else {\n          button_text_object.insertAdjacentText('beforeEnd', '.');\n        }\n        transaction_receipt = await provider.getTransactionReceipt(transaction_hash);\n        loop_count+=1;\n      }\n      console.log(\"Mined transaction receipt: \", transaction_receipt);\n\n      // Button updated & code paused via while loop for duration of opensea_link_delay\n      var wait_count = 0;\n      while ( wait_count < (2 * opensea_link_delay) ) {\n        await pause(500);\n        if (loop_count > 3) {\n          button_text_object.textContent = \"Executing\";\n          loop_count = 0;\n        } else {\n          button_text_object.insertAdjacentText('beforeEnd', '.');\n        }\n        loop_count+=1;\n        wait_count+=1;\n      };\n      button_text_object.textContent = \"Executed!\";\n    };\n  };\n\n  \n\n  // user_token_ID = parseInt(transaction_receipt.logs[0].topics[3], 10);\n\n  if (function_name === 'mint' || function_name === '__mintFree') {\n    console.log(\"Unparsed User Token ID: \", transaction_receipt.logs[0].topics[3]);\n\n    // const events = contract.interface.parseLog(transaction_receipt.logs[0]);\n    // const user_token_ID = events.args.token_ID;\n  \n    user_token_ID = parseInt( transaction_receipt.logs[0].topics[3], 16);\n  \n    console.log(\"Parsed Token ID:\", user_token_ID)\n    console.log(\"Transaction Info: \", transaction_info);\n    return user_token_ID; \n  } else {\n    console.log(\"Transaction Info: \", transaction_info);\n    return transaction_info;\n  }\n  \n  // console.log(\"User Token ID: \", user_token_ID);\n  // console.log(parseInt(transaction_receipt.logs[0].topics[3], 10));\n\n  \n   \n};\n\n\n\n\n\n\n\n//Should take contract address\nexport async function mintNFT(contract_name_input, mint_button, params) {\n  console.log('Mint Contract Name: ', contract_name_input);\n  console.log('Mint Params: ', params);\n  console.log('Mint Button: ', mint_button);\n\n  // Assigns the preset contract address if it exists\n  // If not, `contract_name_input` is assumed to be the address itself\n  var contract_address;\n  if (contract_dict[contract_name_input]) {\n    contract_address = contract_dict[contract_name_input]['Address'][network_name];\n  } else {\n    contract_address = contract_name_input;\n  };\n\n  console.log('Contract Address:', contract_address);\n  \n  if (!signer) {\n    signer = await setSigner();\n  };\n  const iface = new Interface(contract_dict[contract_name_input]['ABI']);\n  iface.format(FormatTypes.full);\n  const contract = new ethers.Contract(contract_address, iface, signer);\n  var transactionInfo;\n  \n\n  if (params.length === 0) {\n    transactionInfo = await contract.mint();\n  } else if (params.length === 1) {\n    transactionInfo = await contract.mint(params[0]);\n  } else if (params.length === 2) {\n    transactionInfo = await contract.mint(params[0], params[1]);\n  } else if (params.length === 3) {\n    transactionInfo = await contract.mint(params[0], params[1], params[2]);\n  } else if (params.length === 4) {\n    transactionInfo = await contract.mint(params[0], params[1], params[2], params[3]);\n  } else {\n    transactionInfo = await contract.mint(params[0], params[1], params[2], params[3], params[4]);\n  };\n  user_minted_NFT = true;\n  console.log(\"Transaction info: \", transactionInfo);\n  \n  var transactionHash = transactionInfo.hash;\n  console.log(\"Transaction hash: \", transactionHash);\n\n  var transactionReceipt = await provider.getTransactionReceipt(transactionHash);\n  console.log(\"Immediate transaction receipt: \", transactionReceipt);\n\n  // Button updated & code paused via while loop while awaiting contract execution\n  mint_button.textContent = \"Minting\";\n  var loop_count = 1;\n  while ( !transactionReceipt ) {\n    await pause(500);\n    if (loop_count > 3) {\n      mint_button.textContent = \"Minting\";\n      loop_count = 0;\n    } else {\n      mint_button.insertAdjacentText('beforeEnd', '.');\n    }\n    transactionReceipt = await provider.getTransactionReceipt(transactionHash);\n    loop_count+=1;\n  }\n  console.log(\"Mined transaction receipt: \", transactionReceipt);\n\n  // Button updated & code paused via while loop for duration of opensea_link_delay\n  var wait_count = 0;\n  while ( wait_count < (2 * opensea_link_delay) ) {\n    await pause(500);\n    if (loop_count > 3) {\n      mint_button.textContent = \"Minting\";\n      loop_count = 0;\n    } else {\n      mint_button.insertAdjacentText('beforeEnd', '.');\n    }\n    loop_count+=1;\n    wait_count+=1;\n  }\n  console.log(\"Transaction Info: \", transactionInfo);\n\n  user_token_ID = parseInt(transactionReceipt.logs[0].topics[3], 10);\n  console.log(\"User Token ID: \", user_token_ID);\n  console.log(\"Unparsed User Token ID: \", transactionReceipt.logs[0].topics[3]);\n  return user_token_ID;  \n}\n\n\n\n\n\n  \n  \n//--------------------------------------------------------------------------------------------------\n//# Optional Dev Page Functions for Testing\n\n\n\n\n\n\n\n\n\n//--------------------------------------------------------------------------------------------------\n//# Custom Smart Contract Calls\n// *Update this section with your smart contract's custom function calls\n\nexport async function getUserStats(address_input) {\n  if (!address_input) {\n    address_input = user_address;\n  };\n  if (!address_input) {\n    address_input = await setUserAddress();\n  };\n  const contract = new ethers.Contract(contract_dict['LMNTL']['Address'][network_name], contract_dict['LMNTL']['ABI'], provider);\n  user_token_ID = await contract.getPrimaryTokenID(address_input);\n  const user_primary_stats = await contract.getUserPrimaryStats(address_input);\n  console.log('User Primary Stats: ', user_primary_stats);\n  const user_stats_list = await contract.getUserCurrentStats(address_input);\n  const user_stats_dict = {\n    user_token_ID: user_token_ID,\n    user_primary_stats: user_primary_stats,\n    user_stats_list: user_stats_list\n  };\n  console.log('User Stats: ', user_stats_dict);\n  return user_stats_dict;\n}\n\n\nexport async function levelUp(level_up_button) {\n  if (!user_metadata_URI) {\n    user_metadata = await setUserMetadata();\n  };\n  const iface = new Interface(contract_dict['LMNTL']['ABI']);\n  iface.format(FormatTypes.full);\n  const contract = new ethers.Contract(contract_dict['LMNTL']['Address'][network_name], iface, signer);\n\n  const old_metadata_base_address = user_metadata_URI.split('LMNTL')[0];\n  const old_metadata_filename = 'LMNTL' + user_metadata_URI.split('LMNTL')[1];\n\n  var new_metadata_URI;\n\n  if (network_IPFS_dict[network_name] === 'Pinata_old') {\n    new_metadata_URI = old_metadata_base_address + old_metadata_filename.substring(0, old_metadata_filename.length - 5) + \"2.png\";\n  } else {\n    new_metadata_URI = old_metadata_base_address + old_metadata_filename.substring(0, old_metadata_filename.length - 6) + \"2.json\";\n  };\n  console.log('New Metadata URI: ', new_metadata_URI);\n  const transactionInfo = await contract.levelUp(user_address, new_metadata_URI);\n\n  console.log(\"Transaction info: \", transactionInfo);\n  var transactionHash = transactionInfo.hash;\n  console.log(\"Transaction hash: \", transactionHash);\n  var transactionReceipt = await provider.getTransactionReceipt(transactionHash);\n  console.log(\"Immediate transaction receipt: \", transactionReceipt);\n  level_up_button.textContent = \"Evolving\";\n  var loop_count = 1;\n  while ( !transactionReceipt ) {\n    await pause(500);\n    if (loop_count > 3) {\n      level_up_button.textContent = \"Evolving\";\n      loop_count = 0;\n    } else {\n      level_up_button.insertAdjacentText('beforeEnd', '.');\n    }\n    transactionReceipt = await provider.getTransactionReceipt(transactionHash);\n    loop_count+=1;\n  }\n\n  console.log(\"Mined transaction receipt: \", transactionReceipt);\n  console.log(\"Transaction Info: \", transactionInfo);\n\n  const response = await fetch(new_metadata_URI);\n  user_metadata_URI = new_metadata_URI;\n  user_metadata = await response.json();\n  user_avatar_URI = await setUserAvatarURI(user_metadata);\n  return({'metadata': user_metadata,\n          'avatar_URI': user_avatar_URI}); \n};","export default __webpack_public_path__ + \"static/media/meliora_comic_cover.93408526.png\";","export default __webpack_public_path__ + \"static/media/meliora_comic_description.ea3bf384.png\";","import React from 'react'\nimport './animation.css'\nconst Animation = () => {\n     return <></>\n}\n\nexport default Animation\n","export default __webpack_public_path__ + \"static/media/mint_comic_button.21807524.png\";","export default __webpack_public_path__ + \"static/media/play_read_button.2ee5edc6.png\";","export default __webpack_public_path__ + \"static/media/sign_up_button.00fe9212.png\";","export default __webpack_public_path__ + \"static/media/universe-image.8a76d6be.png\";","export default __webpack_public_path__ + \"static/media/guardians-image.9723b1bc.png\";","export default __webpack_public_path__ + \"static/media/partners-image.e21e9a12.png\";","export default __webpack_public_path__ + \"static/media/EXP_plus_5.7ef89b0c.gif\";","export default __webpack_public_path__ + \"static/media/EXP_plus_10.cd8d1cc1.gif\";","export default __webpack_public_path__ + \"static/media/TAP_plus_3.bb9c9a3b.gif\";","export default __webpack_public_path__ + \"static/media/click_to_open_button.956bad6b.png\";","//--------------------------------------------------------------------------------------------------\n//# Imports\n\nimport React, { useState, useContext, useEffect } from 'react'\nimport SmartContractContext from '../../scripts/SmartContractContext';\nimport {connectWallet, runContractFunction, getJSONfromIPFS, setUserTokenID, setUserMetadata, setUserAvatarURI} from '../../scripts/SmartContractOperator';\nimport Aos from \"aos\";\nimport \"aos/dist/aos.css\";\n\nimport EXP_plus_5 from '../../image/animations/exp/EXP_plus_5.gif'\nimport EXP_plus_10 from '../../image/animations/exp/EXP_plus_10.gif'\n\nimport TAP_plus_3 from '../../image/animations/TAP_plus_3.gif'\n\nimport logo from '../../image/logo.png'\nimport clickToOpen from '../../image/click_to_open_button.png'\nimport melioraComicCover from '../../image/meliora_comic_cover.png'\n\nimport './gamegui.css'\n\n\n\n\n\n\n\n\n//--------------------------------------------------------------------------------------------------\n//# Variables\n\n\nconst connect_on_load = false;\n\nvar network_name = 'sepolia';\nvar user_wallet_info;\nvar game_loaded = false;\n\n\nvar scene_dict = {};\n\n// var current_time = await getDateTime();\n\n// let player_ledger = [\n//                       {\"world\": \"Meliora\",\n//                        \"game\": \"The Birth of Meliora\",\n//                        \"scene\": \"\",\n//                        \"element\": \"\",\n//                        \"time\": current_time}\n//                     ];\n\nlet player_leder = [];\n\nconst EXP_animation_dict = {5: EXP_plus_5,\n                            10: EXP_plus_10};\n\nconst TAP_animation_dict = {3: TAP_plus_3};\n\nconst animation_dict = {\"EXP\": {5: EXP_plus_5,\n                                10: EXP_plus_10},\n                        \"TAP\": {3: TAP_plus_3}};\n\nvar current_world = \"Meliora\";\nvar current_game = \"The Birth of Meliora\";\nvar current_scene = 0;\nvar current_time;\nvar background_image = melioraComicCover;\nvar element_1_image;\nvar element_2_image;\nvar element_3_image;\n// var element_4;\n// var element_5;\n// var element_6;\n// var element_7;\n// var element_8;\n// var element_9;\n\nvar element_1_coordinates;\nvar element_2_coordinates;\nvar element_3_coordinates;\n\n\nvar mobile_device = false;\nif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\n  console.log(\"Mobile device detected\");\n  mobile_device = true;\n};\n\nvar vertical_display = false;\nif (window.screen.width < window.screen.height) {\n  console.log(\"Vertical screen detected\");\n  vertical_display = true;\n  console.log(\"window.screen.width: \", window.screen.width);\n  console.log(\"window.screen.height: \", window.screen.height);\n};\n\nvar rotate_game = false;\n\n\n//AppStart\nconst GameGUI = () => {\n\n\nlet { user_address, setAddress_Context } = useContext(SmartContractContext);\nlet { user_token_ID, setTokenID_Context } = useContext(SmartContractContext);\nlet { user_balance, setBalance_Context } = useContext(SmartContractContext);\nlet { user_metadata, setMetadata_Context } = useContext(SmartContractContext);\nlet { user_avatar_URI, setAvatarURI_Context } = useContext(SmartContractContext);\n\nuseEffect(() => {\n  Aos.init({ duration: 2000 });\n}, []);\n\n\nvar open_comic_button = document.getElementById('openComicButton');\n\nvar background = document.getElementById('backgroundImage');\n\nvar element_1 = document.getElementById('element_1');\nvar element_2 = document.getElementById('element_2');\nvar element_3 = document.getElementById('element_3');\n\n\n\nonLoad();\n\n\n//--------------------------------------------------------------------------------------------------\n//# Functions\n\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n\nfunction pause(time) {\n  const seconds = time/1000;\n  console.log('PAUSE Start: ' + seconds.toString() + ' seconds');\n  return new Promise(resolve => setTimeout(resolve, time));\n};\n\nasync function getDateTimeString() {\n  const date_object = new Date();\n  const date_time_string = date_object.toLocaleString();\n  return(date_time_string);\n};\n\nasync function onLoad() {\n  console.log('\\nGameGUI >>> RUNNING onLoad()');\n  //await connectWallet();\n  //scene_dict = await runContractFunction('Signatures', 'getTask', [1000, 'world: ' + current_world + ', game: ' + current_game]);\n  //await updatePlayerLedger(\"none\");\n  //console.log(\"Scene Dict:\", scene_dict);\n  // if (mobile_device || vertical_display) {\n  //   //rotate_game = true;\n  //   document.getElementById('playerGameInterfaceImage').style.opacity = '1';\n  //   document.getElementById('playerGameInterfaceContainer').style.top = '100%';\n  // };\n};\n\nasync function loadGame() {\n  console.log('\\nGameGUI >>> RUNNING loadGame()');\n  if (!game_loaded) {\n    user_wallet_info = await connectWallet(network_name);\n    await updatePlayerLedger(\"none\");\n\n    var transaction_info = await runContractFunction('Signatures', 'getTask', [1008, 'world: ' + current_world + ', game: ' + current_game]);\n    scene_dict = await getJSONfromIPFS(transaction_info[0]);\n    console.log(\"Scene Dict:\", scene_dict);\n\n    game_loaded = true;\n    open_comic_button = document.getElementById('openComicButton');\n    open_comic_button.style.display = 'none';\n    await changeScene(1);\n  };\n};\n\n\n// async function handleButtonClick(event) {\n//   const button_ID = event.target.id.split('gameSceneCursorImage')[1];\n//   console.log('Button ID:', button_ID);\n//   await changeScene();\n//   if (button_ID === '4') {\n//     await changeScene();\n//   }\n// };\n\nasync function handleElementClick(event) {\n  const element_ID = event.target.id.split('element_')[1];\n  await updatePlayerLedger(element_ID);\n  const new_scene_number = scene_dict['scenes'][current_scene.toString()]['elements'][element_ID.toString()]['linked_scene']\n  await changeScene(new_scene_number);\n};\n\n\nasync function updatePlayerLedger(world=\"\", game=\"\", scene=0, element_ID, time) {\n  console.log('\\nGameGUI >>> RUNNING updatePlayerLedger()');\n  if (!world) {\n    world = current_world;\n  };\n  if (!game) {\n    game = current_game;\n  };\n  if (!scene) {\n    scene = current_scene;\n  };\n  if (!time) {\n    current_time = getDateTimeString();\n    time = current_time;\n  };\n  const new_ledger_entry = {\"world\": world,\n                            \"game\": game,\n                            \"scene\": scene,\n                            \"element\": element_ID,\n                            \"time\": time};\n  player_leder.push(new_ledger_entry);\n  return(new_ledger_entry);\n};\n\n\nasync function updateElementCoordinates(element, coordinates) {\n  console.log('\\nGameGUI >>> RUNNING updateElementCoordinates()');\n  console.log('Coordinates Input: ', coordinates);\n  element.style.left = coordinates[0].toString() + '%';\n  element.style.bottom = coordinates[1].toString() + '%';\n};\n\n\nasync function changeScene(new_scene_number = false) {\n  console.log('\\nGameGUI >>> RUNNING changeScene()');\n  console.log('Scene # Input:', new_scene_number);\n  if (!new_scene_number && new_scene_number !== 0) {\n    new_scene_number = current_scene += 1;\n  };\n  \n  current_scene = new_scene_number;\n  console.log('New current_scene #:', current_scene);\n  \n\n  background_image = scene_dict['scenes'][current_scene.toString()]['background'];\n  background = document.getElementById('backgroundImage');\n  console.log(background);\n  background.src = background_image;\n  console.log('New Background:', background_image);\n\n  element_1 = document.getElementById('element_1');\n  if (scene_dict['scenes'][current_scene.toString()]['elements']['1']) {\n    element_1_image = scene_dict['scenes'][current_scene.toString()]['elements']['1']['uri'];\n    element_1.src = element_1_image;\n    element_1.style.display = 'inline';\n    element_1_coordinates = scene_dict['scenes'][current_scene.toString()]['elements']['1']['coordinates']\n    await updateElementCoordinates(element_1, element_1_coordinates);\n  } else {\n    element_1.style.display = 'none';\n  };\n\n  element_2 = document.getElementById('element_2');\n  if (scene_dict['scenes'][current_scene.toString()]['elements']['2']) {\n    element_2_image = scene_dict['scenes'][current_scene.toString()]['elements']['2']['uri'];\n    element_2.src = element_2_image;\n    element_2.style.display = 'inline';\n    element_2_coordinates = scene_dict['scenes'][current_scene.toString()]['elements']['2']['coordinates']\n    await updateElementCoordinates(element_2, element_2_coordinates);\n  } else {\n    element_2.style.display = 'none';\n  };\n  \n  element_3 = document.getElementById('element_3');\n  if (scene_dict['scenes'][current_scene.toString()]['elements']['3']) {\n    element_3_image = scene_dict['scenes'][current_scene.toString()]['elements']['3']['uri'];\n    element_3.src = element_3_image;\n    element_3.style.display = 'inline';\n    element_3_coordinates = scene_dict['scenes'][current_scene.toString()]['elements']['3']['coordinates']\n    await updateElementCoordinates(element_3, element_3_coordinates);\n  } else {\n    element_3.style.display = 'none';\n  };\n\n  // // EXP\n  // var EXP_gain = 0;\n  // if (scene_dict['scenes'][current_scene.toString()]['exp']) {\n  //   EXP_gain = scene_dict['scenes'][current_scene.toString()]['exp'];\n  // };\n\n  // // TAP\n  // var TAP_gain = 0;\n  // if (scene_dict['scenes'][current_scene.toString()]['tap']) {\n  //   TAP_gain = scene_dict['scenes'][current_scene.toString()]['tap'];\n  // };\n  \n\n  // if (new_scene_number >= 0) {\n  //   if (EXP_gain) {\n  //     gainEXP(EXP_gain);\n  //     await pause(2000);\n  //   };\n  //   if (TAP_gain) {\n  //     gainTAP(TAP_gain);\n  //     await pause(2000);\n  //   };\n  // };\n\n  // Save to local storage for pre-account\n  // sessionStorage.setItem(current_scene.toString(), 'EXP: ' + EXP_gain.toString() + ', TAP: ' + TAP_gain.toString());\n\n\n};\n\n\n// async function changeScene(new_scene_number = false) {\n//   console.log('Scene # Input:', new_scene_number);\n//   if (!new_scene_number && new_scene_number !== 0) {\n//     new_scene_number = current_scene += 1;\n//   };\n  \n  \n//   current_scene = new_scene_number;\n//   console.log('Scene Changed to:', current_scene);\n  \n\n//   background_image = scene_dict['scenes'][current_scene.toString()]['background'];\n//   console.log('Background:', background_image);\n\n//   const button_1 = document.getElementById('gameSceneCursorImage1');\n//   const button_2 = document.getElementById('gameSceneCursorImage2');\n//   const button_3 = document.getElementById('gameSceneCursorImage3');\n//   const button_4 = document.getElementById('gameSceneCursorImage4');\n//   const button_5 = document.getElementById('gameSceneCursorImage5');\n  \n//   // Button 1\n//   if (scene_dict['scenes'][current_scene.toString()]['button_1'] === 'next') {\n//     button_cursor_1 = cursor_image_Next;\n//   } else if (scene_dict['scenes'][current_scene.toString()]['button_1'] === 'large' || scene_dict['scenes'][current_scene.toString()]['button_1'] === 'grey') {\n//     button_cursor_1 = cursor_image_Large;\n//   } else {\n//     button_cursor_1 = '';\n//   };\n//   if (button_1) {\n//     if (scene_dict['scenes'][current_scene.toString()]['button_1'] === 'grey') {\n//       button_1.style.filter = 'brightness(35%)';\n//     } else {\n//       button_1.style.filter = 'brightness(100%)';\n//     }\n//   }\n\n\n//   // Button 2\n//   if (scene_dict['scenes'][current_scene.toString()]['button_2'] === 'large'|| scene_dict['scenes'][current_scene.toString()]['button_2'] === 'grey') {\n//     button_cursor_2 = cursor_image_Large;\n//     if (scene_dict['scenes'][current_scene.toString()]['button_2'] === 'grey') {\n//       button_2.style.filter = 'brightness(35%)';\n//     } else {\n//       button_2.style.filter = 'brightness(100%)';\n//     };\n//   } else {\n//     button_cursor_2 = '';\n//   };\n  \n\n//   // Button 3\n//   if (scene_dict['scenes'][current_scene.toString()]['button_3'] === 'large') {\n//     button_cursor_3 = cursor_image_Large;\n//   } else {\n//     button_cursor_3 = '';\n//   }\n\n\n//   // Wallet Button\n//   if (scene_dict['scenes'][current_scene.toString()]['wallet_button'] === 'next') {\n//     button_cursor_4 = cursor_image_Next;\n//   } else if (scene_dict['scenes'][current_scene.toString()]['wallet_button'] === 'large') {\n//     button_cursor_4 = cursor_image_Large;\n//   } else {\n//     button_cursor_4 = '';\n//   };\n\n\n//   // Claim Button\n//   if (scene_dict['scenes'][current_scene.toString()]['claim_button'] === 'next') {\n//     button_cursor_5 = cursor_image_Next;\n//   } else if (scene_dict['scenes'][current_scene.toString()]['claim_button'] === 'medium') {\n//     button_cursor_5 = cursor_image_Medium;\n//   } else if (scene_dict['scenes'][current_scene.toString()]['claim_button'] === 'large') {\n//     button_cursor_5 = cursor_image_Large;\n//   } else {\n//     button_cursor_5 = '';\n//   };\n\n\n//   // EXP\n//   var EXP_gain = 0;\n//   if (scene_dict['scenes'][current_scene.toString()]['exp']) {\n//     EXP_gain = scene_dict['scenes'][current_scene.toString()]['exp'];\n//   };\n\n//   // TAP\n//   var TAP_gain = 0;\n//   if (scene_dict['scenes'][current_scene.toString()]['tap']) {\n//     TAP_gain = scene_dict['scenes'][current_scene.toString()]['tap'];\n//   };\n  \n\n//   if (new_scene_number >= 0) {\n//     document.getElementById('backgroundImage').src = background_image;\n//     button_1.style.opacity = '0';\n//     button_2.style.opacity = '0';\n//     button_3.style.opacity = '0';\n//     button_4.style.opacity = '0';\n//     button_5.style.opacity = '0';\n//     button_1.src = button_cursor_1;\n//     button_2.src = button_cursor_2;\n//     button_3.src = button_cursor_3;\n//     button_4.src = button_cursor_4;\n//     button_5.src = button_cursor_5;\n//     if (EXP_gain) {\n//       gainEXP(EXP_gain);\n//       await pause(2000);\n//     };\n//     if (TAP_gain) {\n//       gainTAP(TAP_gain);\n//       await pause(2000);\n//     };\n//   };\n\n//   // Save to local storage for pre-account\n//   sessionStorage.setItem(current_scene.toString(), 'EXP: ' + EXP_gain.toString() + ', TAP: ' + TAP_gain.toString());\n\n\n// };\n\n\nasync function gainEXP(EXP_gain) {\n  if (EXP_gain > 0) {\n    document.getElementById('expAnimation').src = EXP_animation_dict[EXP_gain];\n    await pause(5000);\n    document.getElementById('expAnimation').src = '';\n  };\n};\n\nasync function gainTAP(TAP_gain) {\n  if (TAP_gain > 0) {\n    document.getElementById('expAnimation').src = TAP_animation_dict[TAP_gain];\n    await pause(5000);\n    document.getElementById('expAnimation').src = '';\n  };\n};\n\nasync function saveProgress(event) {\n  console.log(current_scene);\n  if (current_scene === 0) {\n    document.getElementById('saveButton').textContent = 'Save';\n    scene_dict = await getJSONfromIPFS(scene_dict[0]);\n    console.log('Scene:', scene_dict);\n    changeScene(0);\n  } else {\n    let i = 0;\n    let new_progress_array = {};\n    while (i < current_scene) {\n      new_progress_array[i] = sessionStorage.getItem(i.toString());\n    };\n  };\n};\n\n\nfunction handleMouseOver(event) {\n  const element_ID = event.target.id.split('element_')[1];\n  let element = document.getElementById(event.target.id);\n  const current_width = parseFloat(window.getComputedStyle(event.target).width);\n  const current_height = parseFloat(window.getComputedStyle(event.target).height);\n  const new_width = current_width * 1.2;\n  const new_height = current_height * 1.2;\n  event.target.style.width = new_width + 'px';\n  event.target.style.height = new_height + 'px';\n  //element.style.transform = 'scale(1.20)';\n}\n\nfunction handleMouseLeave(event) {\n  const element_ID = event.target.id.split('element_')[1];\n  let element = document.getElementById(event.target.id);\n  const current_width = parseFloat(window.getComputedStyle(event.target).width);\n  const current_height = parseFloat(window.getComputedStyle(event.target).height);\n  const new_width = current_width * 1.0 / 1.2;\n  const new_height = current_height * 1.0 / 1.2;\n  event.target.style.width = new_width + 'px';\n  event.target.style.height = new_height + 'px';\n  //element.style.transform = 'scale(1.0)';\n}\n\n\n\n//--------------------------------------------------------------------------------------------------\n//# HTML\n\nreturn (\n  <div className='gameGUI'>\n    <div className='gameGUIContainer'\n      style={(rotate_game) ? {\n        transform: \"rotate(90deg)\",\n        transformOrigin: \"left right\"} :\n        {}}>\n      <div className='gameSceneContainer' \n        style={(vertical_display) ? {\n          width: \"100vw\",\n          margin: \"0% 0% 0% 0%\"} :\n          {}}>\n        <div className='backgroundContainer'>\n          <img onClick={loadGame} src={background_image} alt='' id='backgroundImage' className='backgroundImage'/>\n        </div>\n        <div className='gameElementContainer'>\n          <img src='' alt='' id='rewardAnimation' className='rewardAnimation'\n            style={{opacity:'0'}}/>\n          <img onClick={handleElementClick} onMouseOver={handleMouseOver} onMouseLeave={handleMouseLeave} src={element_1_image} alt='' id='element_1' className='gameElement'\n            style={{opacity:'1'}}/>\n          <img onClick={handleElementClick} onMouseOver={handleMouseOver} onMouseLeave={handleMouseLeave} src={element_2_image} alt='' id='element_2' className='gameElement'\n            style={{opacity:'1'}}/>\n          <img onClick={handleElementClick} onMouseOver={handleMouseOver} onMouseLeave={handleMouseLeave} src={element_3_image} alt='' id='element_3' className='gameElement'\n            style={{opacity:'1'}}/>\n        </div>\n      </div>\n    </div>\n    <div className='openComicButtonContainer' id='openComicButtonContainer'>\n      <img src={clickToOpen} alt='' onClick={loadGame} id='openComicButton' className='openComicButton'/>\n    </div>\n  </div>\n  )\n}\n//AppEnd\n\nexport default GameGUI","import React, { useState, useContext, useEffect } from 'react'\nimport SmartContractContext from '../../scripts/SmartContractContext';\n\nimport Aos from \"aos\";\nimport \"aos/dist/aos.css\";\n\nimport { connectWallet, runContractFunction, getFunctionParams } from '../../scripts/SmartContractOperator';\nimport {mintNFT, getOpenSeaLink, getJSONfromIPFS, setUserTokenID, setUserMetadata, setUserAvatarURI} from '../../scripts/SmartContractOperator';\n\n\nimport meliora_comic_cover_image from '../../image/meliora_comic_cover.png'\nimport meliora_comic_description_image from '../../image/meliora_comic_description.png'\nimport mint_button_image from '../../image/mint_comic_button.png'\nimport play_read_button_image from '../../image/play_read_button.png'\nimport sign_up_image from '../../image/sign_up_button.png'\nimport blank_button_image from '../../image/blank_button.png'\n\nimport './mintgui.css'\n\nvar opensea_link = '';\n\nconst MintGUI = () => {\n\n  useEffect(() => {\n    Aos.init({ duration: 2000 });\n  }, []);\n\n  let { user_address, setAddress_Context } = useContext(SmartContractContext);\n  let { user_balance, setBalance_Context } = useContext(SmartContractContext);\n  let { network_name, setNetwork_Context } = useContext(SmartContractContext);\n  let { user_token_ID, setTokenID_Context } = useContext(SmartContractContext);\n  let { user_metadata, setMetadata_Context } = useContext(SmartContractContext);\n  let { user_avatar_URI, setAvatarURI_Context } = useContext(SmartContractContext);\n  let { contract_name, setContractName_Context } = useContext(SmartContractContext);\n\n  network_name = 'sepolia';\n  contract_name = 'MelioraComicV1';\n  user_address = false;\n  var total_minted = 0; //runContractFunction(contract_name, 'getTotalSupply');\n\n  function mouseover(event) {\n    let element = document.getElementById(event.target.id);\n    element.style.transform = 'scale(1.10)';\n  };\n  \n  function mouseleave(event) {\n    let element = document.getElementById(event.target.id);\n    element.style.transform = 'scale(1.0)';\n  };\n\n  async function mouseClick(event) {\n    await setUserWalletInfo();\n    const mint_button = document.getElementById(event.target.id);\n    if (event.target.id === 'mintButton1') {\n      await executeMint(1, mint_button);\n    } else if (event.target.id === 'mintButton5') {\n      await executeMint(5, mint_button);\n    } else if (event.target.id === 'mintButtonCustom') {\n      if (Number(document.getElementById(\"mintButtonCustom\").value) >= 0) {\n        await executeMint(Number(document.getElementById(\"mintButtonCustom\").value), mint_button);\n      }\n    } else if(event.target.id === 'readButton') {\n      window.open('https://bafybeictavxgorrl67f2dsvfafu4zfdhts52bg7fystxeiz2bcnxkggb6y.ipfs.nftstorage.link/#p=1', '_blank');\n    } else if(event.target.id === 'mintguiOpenSeaLink') {\n      window.open(opensea_link, '_blank');\n    };\n    await updateTotalMinted();\n  };\n\n  async function executeMint(amount, mint_button) {\n    // const opensea_link_button = document.getElementById(\"mintguiOpenSeaLink\");\n    // mint_button.style.display = 'block';\n    const token_ID = await runContractFunction(contract_name, 'mint', [], mint_button);\n    console.log('token_ID', token_ID);\n    opensea_link = await getOpenSeaLink(contract_name, token_ID);\n    // mint_button.style.display = 'inline-block';\n    document.getElementById('mintContainer3').style.display = 'inline-block';\n    mint_button.textContent = \"Mint Success!\";\n    // mint_button.href = opensea_link;\n    // mint_button.target = '_blank';\n  };\n\n  \n  async function setUserWalletInfo() {\n    await setNetwork_Context(network_name);\n    const user_wallet_info = await connectWallet(network_name);\n    user_address = user_wallet_info['address'];\n    await setAddress_Context(user_address);\n    user_balance = user_wallet_info['balance'];\n    await setContractName_Context(contract_name);\n    await updateTotalMinted();\n    document.getElementById('connectContainer').style.display = 'none';\n    document.getElementById('infoContainer').style.display = 'inline-block';\n    document.getElementById('mintContainer1').style.display = 'inline-block';\n    document.getElementById('mintContainer2').style.display = 'inline-block';\n    document.getElementById('mintguiRightContainer').style.width = '45%';\n  };\n\n  async function updateTotalMinted() {\n    const total_minted_display = document.getElementById('totalMinted');\n    total_minted = await runContractFunction(contract_name, 'getCurrentSupply');\n    total_minted_display.textContent = 'Total Minted: ' + total_minted.toString();\n  };\n\n\n\n  return (\n    <div className='mintgui'>\n      <div className='mintguiLeftContainer'>\n        <div className='mintguiLeftTop'>\n          <div className='mintguiImageContainer1'>\n            <img data-aos=\"fade-right\" src={meliora_comic_cover_image} alt='' id='comicCoverImage' className='mintguiImage comicCoverImage'  />\n          </div>\n        </div>\n      </div>\n      <div className='mintguiRightContainer' id='mintguiRightContainer'>\n        <div className='mintguiRightInnerContainer'>\n          <img data-aos=\"fade-left\" src={meliora_comic_description_image} alt='' id='comicDescriptionImage' className='mintguiImage comicDescriptionImage' />\n        </div>\n        <div id='connectContainer' className='mintguiConnectContainer buttonGroupContainer' style={(user_address) ? {display: \"none\"} : {display: \"inline-block\"}}>\n          <div className='mintButtonContainer buttonContainer'>\n            <span onClick={mouseClick} onMouseOver={mouseover} onMouseLeave={mouseleave} id='connectButton' className='mintguiButton connectButton'>\n              Connect Wallet\n            </span>\n          </div>\n        </div>\n        <div id='infoContainer' className='mintguiInfoContainer buttonGroupContainer' style={(user_address) ? {display: \"inline-block\"} : {display: \"none\"}}>\n          <div className='mintButtonContainer buttonContainer'>\n            <span data-aos=\"fade-left\" onMouseOver={mouseover} onMouseLeave={mouseleave} id='mintPrice' className='mintguiInfo mintButton'>\n              Mint Price: .01 ETH\n            </span>\n            <span data-aos=\"fade-left\" onMouseOver={mouseover} onMouseLeave={mouseleave} id='totalMinted' className='mintguiInfo readButton'>\n              Total Minted:\n            </span>\n          </div>\n          <div className='mintButtonContainer buttonContainer'>\n            \n          </div>\n          {/* <img data-aos=\"fade-left\" src={mint_button_image} alt='' onClick={mouseClick} onMouseOver={mouseover} onMouseLeave={mouseleave} id='mintguiMintButton' className='mintguiButton mintguiMintButton' />\n          <a href={window.location.href + 'mintgui/meliora/volume1/play'}>\n            <img data-aos=\"fade-left\" src={play_read_button_image} alt='' onMouseOver={mouseover} onMouseLeave={mouseleave} id='mintguiDescriptionButton' className='mintguiButton comicDescriptionButton' />\n          </a> */}\n        </div>\n        <div id='mintContainer1' className='mintguiButtonsContainer1 buttonGroupContainer' style={(user_address) ? {display: \"inline-block\"} : {display: \"none\"}}>\n          <div className='mintButtonContainer buttonContainer'>\n            <span data-aos=\"fade-left\" onClick={mouseClick} onMouseOver={mouseover} onMouseLeave={mouseleave} id='mintButton1' className='mintguiButton mintButton'>\n              Mint 1 for .01 ETH\n            </span>\n            <span data-aos=\"fade-left\" onClick={mouseClick} onMouseOver={mouseover} onMouseLeave={mouseleave} id='mintButton5' className='mintguiButton readButton'>\n              Mint 5 for .05 ETH\n            </span>\n          </div>\n          <div className='mintButtonContainer buttonContainer'>\n            \n          </div>\n          {/* <img data-aos=\"fade-left\" src={mint_button_image} alt='' onClick={mouseClick} onMouseOver={mouseover} onMouseLeave={mouseleave} id='mintguiMintButton' className='mintguiButton mintguiMintButton' />\n          <a href={window.location.href + 'mintgui/meliora/volume1/play'}>\n            <img data-aos=\"fade-left\" src={play_read_button_image} alt='' onMouseOver={mouseover} onMouseLeave={mouseleave} id='mintguiDescriptionButton' className='mintguiButton comicDescriptionButton' />\n          </a> */}\n        </div>\n        <div id='mintContainer2' className='mintguiButtonsContainer2 buttonGroupContainer' style={(user_address) ? {display: \"inline-block\"} : {display: \"none\"}}>\n          <div className='mintButtonContainer buttonContainer'>\n            <span data-aos=\"fade-left\" onClick={mouseClick} onMouseOver={mouseover} onMouseLeave={mouseleave} id='mintButtonCustom' className='mintguiButton mintButton'>\n              Mint Custom Amount\n            </span>\n            <span data-aos=\"fade-left\" id='amountButton' className='mintguiInputField readButton'>\n              <input className='amountEntry' id='amountEntry' placeholder=\"# of Copies\" type=\"number\"/>\n            </span>\n          </div>\n        </div>\n        <div id='mintContainer3' className='mintedContainer mintguiButtonsContainer1 buttonGroupContainer' style={(user_address) ? {display: \"inline-block\"} : {display: \"none\"}}>\n          <div className='mintButtonContainer buttonContainer'>\n            <span data-aos=\"fade-left\" onClick={mouseClick} onMouseOver={mouseover} onMouseLeave={mouseleave} id='readButton' className='mintguiButton mintButton'>\n              Read Comic\n            </span>\n            <span data-aos=\"fade-left\" onClick={mouseClick} onMouseOver={mouseover} onMouseLeave={mouseleave} id='mintguiOpenSeaLink' className='mintguiButton readButton'>\n              View on OpenSea\n            </span>\n          </div>\n          <div className='mintButtonContainer buttonContainer'>\n            \n          </div>\n          {/* <img data-aos=\"fade-left\" src={mint_button_image} alt='' onClick={mouseClick} onMouseOver={mouseover} onMouseLeave={mouseleave} id='mintguiMintButton' className='mintguiButton mintguiMintButton' />\n          <a href={window.location.href + 'mintgui/meliora/volume1/play'}>\n            <img data-aos=\"fade-left\" src={play_read_button_image} alt='' onMouseOver={mouseover} onMouseLeave={mouseleave} id='mintguiDescriptionButton' className='mintguiButton comicDescriptionButton' />\n          </a> */}\n        </div>\n      </div>\n      {/* <div className='mintguiOpenSeaLinkContainer'>\n        <a id='mintguiOpenSeaLink' className='mintguiOpenSeaLink' href={opensea_link} target='_blank'>Executing</a>\n      </div> */}\n    </div>\n  )\n}\n\nexport default MintGUI\n","import React from 'react'\n\nimport Animation from '../../components/animation/Animation'\nimport MintGUI from '../../components/mintgui/MintGUI'\n// import Background from '../../components/background/Background';\n\nimport './comicmint.css'\n\nconst ComicMint = () => {\n  return (\n    <div className='comicmint'>\n      {/* <Background /> */}\n      <MintGUI />\n      <Animation />\n    </div>\n  )\n}\n\nexport default ComicMint\n","import React, { useState } from 'react';\nimport Navbar from './components/navbar/Navbar';\nimport Background from './components/background/Background';\nimport Main from './pages/main/Main';\nimport Footer from './components/footer/Footer';\nimport ComicPlay from './pages/comicplay/ComicPlay';\nimport ComicMint from './pages/comicmint/ComicMint';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\n\n\nimport SmartContractContext from './scripts/SmartContractContext';\n\n\nconst App = () => {\n     let [user_address, setAddress_Context] = useState(null);\n     let [user_balance, setBalance_Context] = useState(null);\n     let [network_name, setNetwork_Context] = useState(null);\n     let [user_token_ID, setTokenID_Context] = useState(null);\n     let [user_metadata, setMetadata_Context] = useState(null);\n     let [user_avatar_URI, setAvatarURI_Context] = useState(null);\n     let [contract_name, setContractName_Context] = useState(null);\n     return (\n          <SmartContractContext.Provider value={{ user_address, setAddress_Context,\n                                                  user_balance, setBalance_Context,\n                                                  network_name, setNetwork_Context,\n                                                  user_token_ID, setTokenID_Context,\n                                                  user_metadata, setMetadata_Context,\n                                                  user_avatar_URI, setAvatarURI_Context,\n                                                  contract_name, setContractName_Context }}>\n               <Background />\n               <Navbar />\n               <ComicMint />\n               {/* <Footer /> */}\n               {/* <BrowserRouter>\n                    <Background />\n                    <Navbar />\n                    <Routes>\n                         <Route exact path=\"/\" element={<Main />} />\n                         <Route exact path=\"/comics/meliora/volume1/play\" element={<ComicPlay />} />\n                         <Route exact path=\"/comics/meliora/volume1/mint\" element={<ComicMint />} />\n                    </Routes>\n                    <Footer />\n               </BrowserRouter> */}\n          </SmartContractContext.Provider>\n     )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n     <React.StrictMode>\n          <App />\n     </React.StrictMode>,\n     document.getElementById('root')\n)\n"],"sourceRoot":""}